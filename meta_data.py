'''The meta data tests

The basic idea is to create a bunch of files,
then move them to an MDT, or set of MDTs, then maybe move them again.

The goal is to use srun, to scale up to muliple nodes.

That means that each process needs to write all of it's run data somewhere
and then all that data can be consolidated.

Important data for each run:
start time, stop time, total files, how files are arranged
initial MDT configuration, final MDT configuration

Each process should know what directory it does, how many files
are in the directory, it's actual start and end times, where to write
its data.

Then consolidate the data.

This file is just for individual processes made by srun
'''

import argparse
import copy
import datetime
import os
import pathlib
import sys

import yaml

def de_tuple_list(x):
    acc = []
    for i in x:
        acc += list(i)
    return acc

def timestamp():
    return str(datetime.datetime.now()).replace(' ', '_').replace(':', '')

root_log_dir = pathlib.Path(
    '/g/g0/defazio1/non-jira-projects/migration/data'
)

root_files_dir = pathlib.Path(
    '/p/lflood/defazio1/migrate/metadata-tests'
)

spid = str(os.environ.get('SLURM_PROCID'))

def make_run_data(spid, start, end):
    data = {
        'procid': spid,
        'start': start,
        'end': end,
    }

def create_files(root_path):
    '''Create the files for your directory'''
    pass

def migrate_files(root_path):
    '''migrate the files for your directory.'''
    pass

#def create_srun_command()


def make_parser():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        '-m',
        '--mdt-setup',
        help='passed to lfs migrate',
    )
    parser.add_argument(
        '-c',
        '--count',
        help='passed to lfs migrate',
    )
    parser.add_argument(
        '--create',
        help='create files with a given number'
    )
    parser.add_argument(
        '-n',
        '--new-files',
        help='create n new files',
    )
    parser.add_argument(
        '-f',
        '--files-dir',
        help='the files directory'
    )
    parser.add_argument(
        '--num-procs',
        help='number of procs, for srun'
    )
    parser.add_argument(
        '--num-nodes',
        help='number of nodes, for srun'
    )
    parser.add_argument(
        '-s',
        '--setup',
        action='store_true',
        help=(
            'set up the directories and write the meta_data. '
            'create and run the srun command.'
        ),
    )

    #parser.add_argument(
    #)

    return parser


def make_command_migrate(args):
    '''Do the actual migrate command.
    '''
    cmd = ['lfs', 'migrate']
    if args['mdt-setup']:
        cmd += ['-m', args['mdt-setup']]
    if args['count']:
        cmd += ['-c', args['count']]
    cmd.append(files_dir)

    return cmd




# def do_run():
#     start_time = 1
#     parser = make_parser()
#     args = vars(parsr.parse_args())

#     files_root_dir = pathlib.Path(args['files-root'])
#     files_dir = files_root_dir / str(spid)



#     else:
#         cmd = ['lfs', 'migrate']
#         if args['mdt-setup']:
#             cmd += ['-m', args['mdt-setup']]
#         if args['count']:
#             cmd += ['-c', args['count']]
#         args.append(files_dir)

#         subprocess.run(
#             ['lfs', 'migrate', ]
#         )



#     end_time = 1

#     write_data(args, start_time, end_time):




def make_srun_command(num_nodes, num_procs, command_path):
    '''need to eventually deal with what
    machines you're using.
    catalyst to garter for now
    '''
    cmd = [
        'srun',
        '-p', 'pgarter',
        f'-N{num_nodes}',
        f'-n{num_procs}',
        '--time', '05:59:00',
        '-l',
        str(command_path)
    ]

def make_command():


    command = [
        '/g/g0/defazio1/non-jira-projects/migration/meta_data.py',
    ]
    argv = copy.deepcopy(sys.argv)
    argv.remove('-s')
    command += argv

    return ' '.join(command)

def write_command(command, log_dir):
    with open(log_dir / 'command.sh', 'w+') as f:
        f.write('#!/bin/env python3\n')
        f.write('# autogenerated by meta_data.py\n')
        f.write(command)
        f.write('\n')

def setup_run(args):
    '''Create the directories, write the metadata,
    create the srun file, and run it.
    '''
    ts = timestamp()
    log_dir = root_log_dir / ts
    files_dir = root_files_dir / ts

    # create the directories
    log_dir.mkdir()
    files_dir.mkdir()

    # make the command the all the srun processes will run
    command = make_command()

    write_command(command, log_dir)
    # create the srun command
    srun_command = make_srun_command(
        args['num_nodes'],
        args['num_procs'],
        str(log_dir / 'command.sh')
    )


    # log the meta_data
    meta_data = {
        'command': command,
        'srun-command': srun_command,
        'argv': sys.argv,
    }
    with open(log_dir / 'meta-data.yaml', 'w+') as f:
        yaml.safe_dump(meta_data, f)



    # launch the srun command


def main():
    parser = make_parser()
    args = vars(parser.parse_args())

    if args['setup']:
        setup_run(args)
    else:
        #do_run(args)
        pass

if __name__ == '__main__':
    main()
